import numpy as np
import matplotlib.pyplot as plt
from numpy import linalg as la


#Zmienna sterujaca rodzajem algorytmu
init='V' #possible algorithms: V,E,F

#simulations parameters:
G=0.01 #force const.
M=500.0 #mass of the bigger planet
m=0.1 #mass of the smaller planet
dt=0.001
steps=10000
s=0 #zmienna sterujaca algorytmmem Verleta


#defining the class planet
class planeta:
    def __init__(self, pos, momentum, mass):
        self.r=pos #position
        self.p=momentum #momentum
        self.m=mass #mass
        
#functions regarding forces of the planets
def sila(pl1,pl2):
    if (la.norm(pl1.r-pl2.r)):
        return -G*pl1.m*pl2.m*(pl1.r-pl2.r)/(la.norm(pl1.r-pl2.r))**3
    else:
        print ("blad, ta sama planeta!!")

def sila_wypadkowa(pl):
    Sily=np.zeros([len(pl),2])
    count=0
    for i in pl:
        for j in pl:
            if (i!=j):
               Sily[count]=Sily[count]+ sila(i,j)
        count=count+1       
    return Sily
            
            
#kinetic energy of a planet
def E_kin(pl1):
    return (la.norm(pl1.p)**2)/(2*pl1.m)

#potential energy of a planet
def E_pot(pl1,pl2):
    return -G*pl1.m*pl2.m/la.norm(pl2.r)


#different algorithms testing
def Alg_Eulera(p1,p2):
    sila_temp=sila(p1,p2)
    p2.r=p2.r+p2.p*dt/p2.m+0.5*(sila_temp/p2.m*dt**2)
    p2.p=p2.p+sila_temp*dt
    return p2
    
def Alg_Verleta(p1,p2, R_temp):
    global s
    if (s==0):
        R_temp[0]=p2.r
        R_temp[1]=Alg_Eulera(p1,p2).r
        s=1
    else:
        sila_temp=sila(p1,p2)
        p2.r=2*R_temp[1]-R_temp[0]+(sila_temp/p2.m)*(dt**2)
        p2.p=(p2.r-R_temp[0])*p2.m/(2*dt)
        R_temp[0]=R_temp[1]
        R_temp[1]=p2.r
    return p2
    
def Alg_Frog(p1,p2):
    V_temp=p2.p
    R_temp=p2.r
    sila_temp=sila(p1,p2)
    p2.p=V_temp+(sila_temp)*dt
    p2.r=R_temp+(p2.p/p2.m)*dt
    return p2

def Alg_Frog2(p2,sila):
    V_temp=p2.p
    R_temp=p2.r
    sila_temp=sila
    p2.p=V_temp+(sila_temp)*dt
    p2.r=R_temp+(p2.p/p2.m)*dt
    return p2
    
#planet objects initializations
#planeta 1, srodek ukladu
r1=np.asarray([0,0]) #init polozen
p1=np.asarray([0,0]) #init pedow

#planeta 2
r2=np.asarray([2,0]) #init polozen
p2=np.asarray([0.0,0.1]) #init pedow

#init planet jako obiektow klasy
p1=planeta(r1,p1,M)
p2=planeta(r2,p2,m)


#ttables with positions and momenta
R=np.zeros([steps,2])
P=np.zeros([steps,2])
E=np.zeros([steps,2])
R_ver=np.zeros([2,2])
V_ver=np.zeros([2,2])

#simulation body loop
for i in range(steps):
    if (init=='E'):
        print('init to E')
        p2=Alg_Eulera(p1,p2)
    if (init=='V'):
        p2=Alg_Verleta(p1,p2, R_ver)
    if (init=='F'):
        p2=Alg_Frog(p1,p2)
    R[i,:]=p2.r
    P[i,:]=p2.p
    E[i]=[E_kin(p2), E_pot(p1,p2)]

#plotting of the energies
plt.figure(1)
plt.subplot(411)
plt.plot(R[:,0],R[:,1])
plt.grid('on')
plt.subplot(412)
plt.plot(range(len(E)),E[:,0] )
plt.subplot(413)
plt.plot(range(len(E)),E[:,1] )
plt.subplot(414)
plt.plot(range(len(E)),E[:,0]+E[:,1] )
